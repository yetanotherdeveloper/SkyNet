#Example of running:
#stap ../scripts/profile.stp  -v --dyninst -c ./skynet --test=2 --mnist-data=../../data/mnist/ --module=1 | c++filt

global timings_start  # Giving size of array here will cause error if size is exceeded , but allow avoid realocation of arrays
global timings
global counts

global final_results # Container to combine data from many threads

#@define function_name %( "*mnist*"  %)   # Handy macro to define name of functions to be traced

@define make_entry_and_exit_probe(process_name,func_name) %(
   
probe process(@process_name).function(@func_name).call
{
  timings_start[ppfunc(),tid()] = gettimeofday_us()
  counts[ppfunc()] <<< 1
}

probe process(@process_name).function(@func_name).return
{
  timings[ppfunc(),tid()] += gettimeofday_us()  - timings_start[ppfunc(),tid()];
}
   
%)

@make_entry_and_exit_probe([DIRNAME_OF_SKYNET_BINARY],"*mnist*")

# Tracing functions of shared lib (loaded by dlopen)
@make_entry_and_exit_probe([DIRNAME_OF_NN_SKYNET_MODULE],"*Neural*")


probe end
{
  # Get per thread results and put them in final container
  foreach([x,tid] in timings) 
  {
    final_results[x] += timings[x,tid]
  }

  # Presents results
  printf("\n\nInclusive profiling results:\n")
  foreach([x] in final_results-) { printf("%s, count: %d total time: %d us\n",x,@count(counts[x]), final_results[x])}
}
